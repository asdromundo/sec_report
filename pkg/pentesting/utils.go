/*
Copyright © 2024 Antonio S. Dromundo sebastiandromundo(at)outlook.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
package pentesting

import (
	"bytes"
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"
	"sync"

	urlverifier "github.com/davidmytton/url-verifier"
	"github.com/spf13/afero"
)

func IsValidURL(input string) bool {
	// Intentar analizar la cadena como una URL

	verifier := urlverifier.NewVerifier()
	ret, _ := verifier.Verify(input)

	/* 	if err != nil {
		fmt.Errorf("Error: %s", err)
	} */

	return ret.IsURL
}

// Función para guardar los resultados en un archivo
func SaveResultsToFile(results bytes.Buffer, fileName string) error {
	fs := afero.NewOsFs()
	file, err := fs.Create(fileName)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.Write(results.Bytes())
	return err
}

func GetFunctionName(i interface{}) string {
	fullName := runtime.FuncForPC(reflect.ValueOf(i).Pointer()).Name()
	parts := strings.Split(fullName, ".")
	return parts[len(parts)-1]
}

func execCommand(command string, ip string) (string, error) {
	// Ejecutar el comando "whois" con la IP proporcionada como argumento
	cmd := exec.Command(command, ip)

	// Capturar la salida estándar del comando
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}

	// Convertir la salida a una cadena y devolverla
	result := string(output)

	return result, nil
}

func RunProgram(method func(string) (string, error), url string, results *bytes.Buffer) {
	{
		methodName := strings.ToLower(GetFunctionName(method))
		result, err := method(url)
		if err != nil {
			fmt.Printf("Error al ejecutar %s: %v\n", methodName, err)
		}
		results.WriteString(fmt.Sprintf("Información de %s para la IP %s\n\n", methodName, url))
		results.WriteString(result)

	}
}

func RunProgramRoutine(method func(string) (string, error), url string, store *[]*bytes.Buffer, wg *sync.WaitGroup) {
	wg.Add(1)
	results := bytes.Buffer{}
	*store = append(*store, &results)
	go func() {
		defer wg.Done()
		RunProgram(method, url, &results)
	}()
}
