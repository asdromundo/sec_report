/*
Copyright © 2024 Antonio S. Dromundo sebastiandromundo(at)outlook.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
package pentesting

import (
	"os/exec"
)

func Whois(ip string) (string, error) {
	// Ejecutar el comando "whois" con la IP proporcionada como argumento
	cmd := exec.Command("whois", ip)

	// Capturar la salida estándar del comando
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}

	// Convertir la salida a una cadena y devolverla
	result := string(output)

	return result, nil
}

func Nslookup(ip string) (string, error) {
	// Ejecutar el comando "nslookup" con la IP proporcionada como argumento
	cmd := exec.Command("nslookup", ip)

	// Capturar la salida estándar del comando
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}

	// Convertir la salida a una cadena y devolverla
	result := string(output)

	return result, nil
}

func Traceroute(ip string) (string, error) {
	// Ejecutar el comando "traceroute" con la IP proporcionada como argumento
	cmd := exec.Command("traceroute", ip)

	// Capturar la salida estándar del comando
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}

	// Convertir la salida a una cadena y devolverla
	result := string(output)

	return result, nil
}

func Nmap(ip string) (string, error) {
	// Ejecutar el comando "traceroute" con la IP proporcionada como argumento
	cmd := exec.Command("nmap", "-v", "-A", ip)

	// Capturar la salida estándar del comando
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}

	// Convertir la salida a una cadena y devolverla
	result := string(output)

	return result, nil
}
